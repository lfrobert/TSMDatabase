SELECT *
FROM TSM_VEHICLE V FULL OUTER JOIN TSM_TRUCK T
ON V.VEHICLE_ID = T.VEHICLE_ID;


SELECT *
FROM TSM_VEHICLE V LEFT OUTER JOIN TSM_EQUIPMENT_VEHICLE T
ON V.VEHICLE_ID = T.VEHICLE_ID AND V.VEHICLE_TYPE = T.VEHICLE_TYPE;




--1
--THIS QUERY SELECTS THE VEHICLE_ID, VEHIICLE MAKE, VEHICLE_MODEL, VEHICLE_YEAR, EQUIPMENT_NAME, AND QUANTITIES OF EQUIPMENT ON THE VEHICLES THAT ARE EQUIPPED WITH AT LEAST ONE DOLLY;
SELECT V.VEHICLE_ID, V.VEHICLE_MAKE, V.VEHICLE_MODEL, V.VEHICLE_YEAR, E.EQUIPMENT_NAME, T.EQUIPMENT_QUANTITY
FROM TSM_VEHICLE V FULL OUTER JOIN TSM_EQUIPMENT_VEHICLE T
ON V.VEHICLE_ID = T.VEHICLE_ID AND V.VEHICLE_TYPE = T.VEHICLE_TYPE
FULL OUTER JOIN TSM_EQUIPMENT E
ON T.EQUIPMENT_ID = E.EQUIPMENT_ID
WHERE E.EQUIPMENT_NAME= 'DOLLY';





--2
--THIS QUERY SELECTS HOW MUCH EMPLOYEE 3 GOT PAID ON JANUARY 14, 2020 AS WELL AS THEIR FULL NAME, HRS WORKED, PAY_DATE, AND IF THEY ARE A PACKER.
SELECT EMPLOYEE_ID, FIRST_NAME ||' '|| LAST_NAME AS "Full Name", HOURLY_WAGE, HOURS_WORKED, TO_CHAR(HOURLY_WAGE * HOURS_WORKED, '$9999.99') AS "Gross Pay", PAY_DATE, PACKING_SKILLS_YN
FROM TSM_EMPLOYEE E INNER JOIN TSM_MOVER M
USING(EMPLOYEE_ID)
INNER JOIN TSM_HOURLY_PAYROLL H
USING(EMPLOYEE_ID)
WHERE EMPLOYEE_ID = 3 AND PAY_DATE = '14-JAN-2020';








--3
--THIS QUERY SELECTS ALL THE GUARDIANS AND DISPLAYS WHICH RESIDENTS THAT THEY HAVE RELATIONSHIPS WITH.iT ALSO SHOWS THEIR NAMES AND WHETHER OR NOT THE RESIDENT CAN CONSENT.
SELECT RESIDENT_ID, CC.FIRST_NAME AS "RESIDENT FIRST NAME", CC.LAST_NAME AS "RESIDENT LAST NAME", R.ABLE_TO_CONSENT_YN, GUARDIAN_ID, C.FIRST_NAME AS "GUARDIAN FIRST NAME", C.LAST_NAME AS "GUARDIAN LAST NAME", G.RELATION_TO_RESIDENT 
FROM TSM_CUSTOMER C INNER JOIN TSM_GUARDIAN G 
ON C.CUSTOMER_ID = G.CUSTOMER_ID AND C.CUSTOMER_TYPE = G.CUSTOMER_TYPE
INNER JOIN TSM_RESIDENT_GUARDIAN RG
ON G.CUSTOMER_ID = RG.GUARDIAN_ID AND G.CUSTOMER_TYPE = RG.CUSTOMER_TYPE_G
INNER JOIN TSM_RESIDENT R
ON RG.RESIDENT_ID = R.CUSTOMER_ID AND RG.CUSTOMER_TYPE_R = R.CUSTOMER_TYPE
INNER JOIN TSM_CUSTOMER CC
ON R.CUSTOMER_ID = CC.CUSTOMER_ID AND R.CUSTOMER_TYPE = CC.CUSTOMER_TYPE;





--4
--THIS QUERY SELECTS THE FIRST AND LAST NAMES OF ALL EMPLOYEES AND CUSTOMERS WHO WERE BORN AFTER JANUARY 1, 1950
SELECT FIRST_NAME, LAST_NAME
FROM TSM_EMPLOYEE
WHERE DOB >= '1-JAN-1950'
UNION 
SELECT FIRST_NAME, LAST_NAME
FROM TSM_CUSTOMER
WHERE DOB >= '1-JAN-1950';






--5
--THIS QUERY FINDS THE AVG JOB COST OF EACH ORDER STATUS TYPE
SELECT ORDER_STATUS, TO_CHAR(ROUND(AVG(JOB_COST),0), '$9999') AS "Avg Job Cost"
FROM TSM_JOB_ORDER
GROUP BY ORDER_STATUS;



--6
--This query finds the age of each employee without rounding
SELECT TRUNC(MONTHS_BETWEEN(SYSDATE, DOB)/12,0) AS "Employee Age"
FROM TSM_EMPLOYEE;


--7
--This query FindS out which customers have email addresses and which ones don't. It also places the first & last names in INITCAP form.
SELECT INITCAP(FIRST_NAME) AS "First Name", INITCAP(LAST_NAME) AS "Last Name", NVL2(EMAIL, 'HAS EMAIL', 'DOES NOT HAVE EMAIL') AS "EMAIL?"
FROM TSM_CUSTOMER;




--8
--THIS QUERY SELECTS THE DOMAIN NAME FOR THE EMAIL ADDRESS OF EACH EMPLOYEE FROM ROSEVILLE. IT IS ORDERED BY THEIR DOB.
SELECT FIRST_NAME, LAST_NAME, SUBSTR(EMAIL ,INSTR(EMAIL,'@')+1,100) AS "EMAIL DOMAIN NAME"
FROM TSM_EMPLOYEE
WHERE CITY = 'ROSEVILLE'
ORDER BY DOB;





--9
--THIS QUERY SHOWS MOVES COMPLETED AT WINDEMERE PARK SENIOR COMMUNITY AND HOW MUCH MONEY IS OWED ON JOBS WE COMPLETED THERE.
SELECT J.JOB_ID, J.START_DATE, J.FINISH_DATE, S.COMMUNITY_NAME, TO_CHAR(J.JOB_COST - J.BILL_AMT_PAID, '$999999.99') AS "MONEY OWED BY CUST"
FROM TSM_SENIOR_COMMUNITY S, (SELECT COMMUNITY_ID, JOB_ID, START_DATE, FINISH_DATE, JOB_COST, BILL_AMT_PAID, ORDER_STATUS FROM TSM_JOB_ORDER) J
WHERE S.COMMUNITY_ID = J.COMMUNITY_ID AND S.COMMUNITY_ID = 2 AND J.ORDER_STATUS = 'COMPLETED';








--10
--THIS QUERY FINDS THE LARGEST JOB COST BY EACH ORDER STATUS CATEGORY IN THE SUBQUERY. THEN IT ALLOWS US TO SEE WHICH JOB ORDERS(JOB_ID), HAD THE LARGEST JOB COST IN EACH CATEGORY.
SELECT JOB_ID, ORDER_STATUS, TO_CHAR(JOB_COST, '$99999.99') AS "JOB COST"
FROM TSM_JOB_ORDER
WHERE(ORDER_STATUS, JOB_COST) IN(SELECT ORDER_STATUS, MAX(JOB_COST)
									FROM TSM_JOB_ORDER
									GROUP BY ORDER_STATUS);
